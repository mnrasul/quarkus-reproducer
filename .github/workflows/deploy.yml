name: Deploy

on:
  pull_request:
    types: [ labeled ]

env:
  DEVMAJ: devmaj
  RELCERT: relcert
  MAJSTG: majstg
  PRD: prd
  SERVICE_NAME: pricing-lambda
  GRAAL_VM_VERSION: 22.1.0
  JAVA_VERSION: java17
  AWS_REGION: us-west-2
  S3_ARTIFACT_BUCKET: test-github-action-artifacts
  VERIFIED_ARTIFACT_NAME: ${{ github.event.repository.name }}/pr-${{ github.event.pull_request.number }}/${{ github.event.pull_request.head.sha }}-verified

jobs:
  branch-up-to-date:
    name: 'Is branch up-to-date?'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest
        uses: actions/checkout@v2

      - name: Checkout branches
        run: |
          git fetch --no-tags origin +refs/heads/*:refs/remotes/origin/*
      - name: Verify branch is up-to-date with master branch
        run: |
          if [ $(git log origin/${{ github.head_ref }}..origin/master --oneline | wc -l) -ne 0 ]
          then
            echo "Branch is not up-to-date with master branch!"
            exit 1
          fi
      - name: Comment on failure
        if: failure()
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            Your branch is not up-to-date with `master`! Please rebase before proceeding.

  deploy-devmaj:
    name: 'devmaj'
    if: github.event.label.name == 'deploy pre-prod' || github.event.label.name == 'deploy dev'
    runs-on: ubuntu-latest
    needs: branch-up-to-date
    steps:
      - name: Checkout latest
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup GraalVM Community Edition
        uses: DeLaGuardo/setup-graalvm@master
        with:
          graalvm: ${{ env.GRAAL_VM_VERSION }}
          java: ${{ env.JAVA_VERSION }}
          native-image: "true"

      - name: Download artifact from s3
        run: ./manageAWS.sh download-artifact ${{ env.S3_ARTIFACT_BUCKET }} ${{ env.VERIFIED_ARTIFACT_NAME }}

      - name: Setup CDK
        run: sudo npm install -g aws-cdk

      - name: Deploy
        continue-on-error: true
        id: deploy
        run: make deploy
        env:
          ENV_NAME: ${{ env.DEVMAJ }}

      - name: If deployment succeeded, comment on PR
        if: steps.deploy.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            I successfully deployed your stack [`${{ env.DEVMAJ }}-${{ env.SERVICE_NAME }}`](${{ steps.deploy.outputs.stack_url }}) to dev AWS!
          reactions: 'rocket'

      - name: If deployment failed, comment on PR
        if: steps.deploy.outcome == 'failure'
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            :x: I failed to deploy your stack [`${{ env.DEVMAJ }}-${{ env.SERVICE_NAME }}`](${{ steps.deploy.outputs.stack_url }}) to dev AWS! Sorry. :x:
          reactions: 'confused'

  deploy-relcert:
    name: 'relcert'
    if: github.event.label.name == 'deploy pre-prod'  || github.event.label.name == 'deploy relcert'
    runs-on: ubuntu-latest
    needs: branch-up-to-date
    steps:
      - name: Checkout latest
        uses: actions/checkout@v2

      - name: Configure dev AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download artifact from s3
        run: ./manageAWS.sh download-artifact ${{ env.S3_ARTIFACT_BUCKET }} ${{ env.VERIFIED_ARTIFACT_NAME }}

      - name: Configure stage AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGE_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup CDK
        run: sudo npm install -g aws-cdk

      - name: Setup GraalVM Community Edition
        uses: DeLaGuardo/setup-graalvm@master
        with:
          graalvm: ${{ env.GRAAL_VM_VERSION }}
          java: ${{ env.JAVA_VERSION }}
          native-image: "true"

      - name: Deploy
        continue-on-error: true
        id: deploy
        run: make deploy
        env:
          ENV_NAME: ${{ env.RELCERT }}

      - name: If deployment succeeded, comment on PR
        if: steps.deploy.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            I successfully deployed your stack [`${{ env.RELCERT }}-${{ env.SERVICE_NAME }}`](${{ steps.deploy.outputs.stack_url }}) to stage AWS!
          reactions: 'rocket'

      - name: If deployment failed, comment on PR
        if: steps.deploy.outcome == 'failure'
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            :x: I failed to deploy your stack [`${{ env.RELCERT }}-${{ env.SERVICE_NAME }}`](${{ steps.deploy.outputs.stack_url }}) to stage AWS! Sorry. :x:
          reactions: 'confused'

  deploy-majstg:
    name: 'majstg'
    if: github.event.label.name == 'deploy pre-prod' || github.event.label.name == 'deploy stage'
    runs-on: ubuntu-latest
    needs: branch-up-to-date
    steps:
      - name: Checkout latest
        uses: actions/checkout@v2

      - name: Configure dev AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download artifact from s3
        run: ./manageAWS.sh download-artifact ${{ env.S3_ARTIFACT_BUCKET }} ${{ env.VERIFIED_ARTIFACT_NAME }}

      - name: Configure prd AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup CDK
        run: sudo npm install -g aws-cdk

      - name: Setup GraalVM Community Edition
        uses: DeLaGuardo/setup-graalvm@master
        with:
          graalvm: ${{ env.GRAAL_VM_VERSION }}
          java: ${{ env.JAVA_VERSION }}
          native-image: "true"

      - name: Deploy
        continue-on-error: true
        id: deploy
        run: make deploy
        env:
          ENV_NAME: ${{ env.MAJSTG }}

      - name: If deployment succeeded, comment on PR
        if: steps.deploy.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            I successfully deployed your stack [`${{ env.MAJSTG }}-${{ env.SERVICE_NAME }}`](${{ steps.deploy.outputs.stack_url }}) to prd AWS!
          reactions: 'rocket'

      - name: If deployment failed, create change-set
        id: change_set
        if: steps.deploy.outcome == 'failure'
        run: make deploy
        env:
          ENV_NAME: ${{ env.MAJSTG }}
          NO_EXECUTE: true

      - name: If change-set created, comment on PR
        if: steps.change_set.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            I failed to deploy your stack `${{ env.MAJSTG }}-${{ env.SERVICE_NAME }}`.

            Here is a [change-set](${{ steps.change_set.outputs.change_set_url }}) that you must execute manually to deploy your application. Please contact DevOps to execute the change-set.

  deploy-prd:
    name: 'prd'
    if: github.event.label.name == 'ship to prod' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: branch-up-to-date
    steps:
      - name: Checkout latest
        uses: actions/checkout@v2

      - name: Checkout pull-request-approval-gate-action repository
        uses: actions/checkout@v2
        with:
          repository: Sunrun/pull-request-approval-gate-action
          ref: b5fd8ecd3b8306b3b69e949e5ddc88a986c93349
          token: ${{ secrets.USER_TOKEN_GITHUB_ACTIONS }}
          path: ./pull-request-approval-gate-action

      - name: Verify pull request is approved
        uses: ./pull-request-approval-gate-action
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base-branch: master

      - name: Configure dev AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download artifact from s3
        run: ./manageAWS.sh download-artifact ${{ env.S3_ARTIFACT_BUCKET }} ${{ env.VERIFIED_ARTIFACT_NAME }}

      - name: Configure prd AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup GraalVM Community Edition
        uses: DeLaGuardo/setup-graalvm@master
        with:
          graalvm: ${{ env.GRAAL_VM_VERSION }}
          java: ${{ env.JAVA_VERSION }}
          native-image: "true"

      - name: Setup CDK
        run: sudo npm install -g aws-cdk

      - name: Deploy
        continue-on-error: true
        id: deploy
        run: make deploy
        env:
          ENV_NAME: ${{ env.PRD }}

      - name: If deployment succeeded, comment on PR
        if: steps.deploy.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            I successfully deployed your stack [`${{ env.PRD }}-${{ env.SERVICE_NAME }}`](${{ steps.deploy.outputs.stack_url }}) to prd AWS!
          reactions: 'rocket'

      - name: If deployment fails, create change-set
        id: change_set
        if: steps.deploy.outcome == 'failure'
        run: make deploy
        env:
          ENV_NAME: ${{ env.PRD }}
          NO_EXECUTE: true

      - name: If change-set created, comment on PR
        if: steps.change_set.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            I failed to deploy your stack `${{ env.PRD }}-${{ env.SERVICE_NAME }}`.

            Here is a [change-set](${{ steps.change_set.outputs.change_set_url }}) that you must execute manually to deploy your application. Please contact DevOps to execute the change-set.

            :exclamation: :exclamation: **After executing the change-set and validating that the application is live, please merge the PR manually.** :exclamation: :exclamation:

      - name: If deployment succeeds, automatically merge PR
        if: steps.deploy.outcome == 'success'
        uses: "pascalgn/automerge-action@v0.12.0"
        env:
          # since we are expecting this action to trigger another action (PR closed), we need to use a PAT
          # source: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token
          GITHUB_TOKEN: "${{ secrets.USER_TOKEN_GITHUB_ACTIONS }}"
          MERGE_LABELS: ""
          MERGE_METHOD: "squash"

  deploy-prd-no-merge:
    name: 'prd no merge'
    if: github.event.label.name == 'deploy prd without merge'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest
        uses: actions/checkout@v2

      - name: Checkout pull-request-approval-gate-action repository
        uses: actions/checkout@v2
        with:
          repository: Sunrun/pull-request-approval-gate-action
          ref: b5fd8ecd3b8306b3b69e949e5ddc88a986c93349
          token: ${{ secrets.USER_TOKEN_GITHUB_ACTIONS }}
          path: ./pull-request-approval-gate-action

      - name: Verify pull request is approved
        uses: ./pull-request-approval-gate-action
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base-branch: master

      - name: Configure dev AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download artifact from s3
        run: ./manageAWS.sh download-artifact ${{ env.S3_ARTIFACT_BUCKET }} ${{ env.VERIFIED_ARTIFACT_NAME }}

      - name: Configure prd AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup GraalVM Community Edition
        uses: DeLaGuardo/setup-graalvm@master
        with:
          graalvm: ${{ env.GRAAL_VM_VERSION }}
          java: ${{ env.JAVA_VERSION }}
          native-image: "true"

      - name: Setup CDK
        run: sudo npm install -g aws-cdk

      - name: Deploy
        continue-on-error: true
        id: deploy
        run: make deploy
        env:
          ENV_NAME: ${{ env.PRD }}

      - name: If deployment succeeded, comment on PR
        if: steps.deploy.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            I successfully deployed your stack [`${{ env.PRD }}-${{ env.SERVICE_NAME }}`](${{ steps.deploy.outputs.stack_url }}) to prd AWS!
          reactions: 'rocket'

      - name: If deployment fails, create change-set
        id: change_set
        if: steps.deploy.outcome == 'failure'
        run: make deploy
        env:
          ENV_NAME: ${{ env.PRD }}
          NO_EXECUTE: true

      - name: If change-set created, comment on PR
        if: steps.change_set.outcome == 'success'
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            I failed to deploy your stack `${{ env.PRD }}-${{ env.SERVICE_NAME }}`.

            Here is a [change-set](${{ steps.change_set.outputs.change_set_url }}) that you must execute manually to deploy your application. Please contact DevOps to execute the change-set.

            :exclamation: :exclamation: **After executing the change-set and validating that the application is live, please merge the PR manually.** :exclamation: :exclamation:
